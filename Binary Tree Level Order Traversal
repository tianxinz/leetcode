/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

*/



/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        
        if(root == null)
            return result;
        
        ArrayList<TreeNode> each_level = new ArrayList<TreeNode>();
        each_level.add(root);
        
        ArrayList<Integer> each_level_num;
        
        while(!each_level.isEmpty())
        {
            ArrayList<TreeNode> parent_level = each_level;
            each_level = new ArrayList<TreeNode>();
            each_level_num = new ArrayList<Integer>();
            
            for(TreeNode n: parent_level)
            {
                each_level_num.add(n.val);
                if(n.left!=null)
                {
                    each_level.add(n.left);
                }
                if(n.right!=null)
                {
                    each_level.add(n.right);
                }
                
            }
            
            result.add(each_level_num);
        }
        
        return result;
    }
}
