/*
Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

*/

public class Solution {
    public ArrayList<ArrayList<Integer>> combine(int n, int k) {
        
        return combineStart(1, n, k);
    }
    
    public ArrayList<ArrayList<Integer>> combineStart(int start, int n, int k)
    {
        if(k==0)
        {  
            ArrayList<Integer> empty = new ArrayList<Integer>();
            ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
            result.add(empty);
            return result;
        }
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        
        
        if(n==k)
        {
            
            ArrayList<Integer> one_combination = new ArrayList<Integer>();
            
            for(int i=start; i<start+n; i++)
            {
                one_combination.add(i);
                
            }
            result.add(one_combination);
            return result;
        }
        
        else
        {
            
            
            for(ArrayList<Integer> each: combineStart(start+1, n-1, k-1) )
            {
                each.add(0,start);
                result.add(each);
            }
            
            result.addAll(combineStart(start+1, n-1, k));
        }
        return result;
    }
