/*
Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,
         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL
Discuss


*/


**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        
        if(root == null)
            return;
            
        LinkedList<TreeLinkNode> each_level = new LinkedList<TreeLinkNode>();
        each_level.add(root);
        
        
        while(!each_level.isEmpty())
        {
            LinkedList<TreeLinkNode> parent = each_level;
            each_level = new LinkedList<TreeLinkNode>();
            
            while(!parent.isEmpty())
            {
                TreeLinkNode node = parent.removeFirst();
                if(parent.peek()!=null)
                {
                    node.next = parent.peek();
                }
                else
                {
                    node.next = null;
                }
                if(node.left!=null)
                    each_level.add(node.left);
                if(node.right!=null)
                    each_level.add(node.right);
            }
        }
    
    }
}
